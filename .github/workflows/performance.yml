name: Performance Benchmarking

on:
  push:
    branches: [main, develop]
  pull_request:
    branches: [main, develop]
  schedule:
    # 每天早上10点运行性能基准测试
    - cron: '0 10 * * *'

jobs:
  benchmark:
    name: 性能基准测试
    runs-on: ubuntu-latest
    strategy:
      matrix:
        node-version: [18, 20]
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v4
        with:
          node-version: ${{ matrix.node-version }}

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建项目
        run: pnpm run build

      - name: 运行性能基准测试
        run: |
          echo "## 性能基准测试报告" > benchmark-report.md
          echo "### 测试时间: $(date)" >> benchmark-report.md
          echo "### Node.js 版本: ${{ matrix.node-version }}" >> benchmark-report.md
          
          # 包大小测试
          echo "#### 包大小分析" >> benchmark-report.md
          pnpm run size >> benchmark-report.md 2>&1
          
          # 构建性能测试
          echo "#### 构建性能" >> benchmark-report.md
          time pnpm run build 2>> benchmark-report.md
          
          # 启动时间测试
          echo "#### 启动时间测试" >> benchmark-report.md
          timeout 10s pnpm run dev || echo "Dev server started" >> benchmark-report.md

      - name: 上传基准测试报告
        uses: actions/upload-artifact@v4
        with:
          name: benchmark-report-${{ matrix.node-version }}
          path: benchmark-report.md
          retention-days: 30

  lighthouse-ci:
    name: Lighthouse CI 性能测试
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建项目
        run: pnpm run build

      - name: 安装 Lighthouse CI
        run: npm install -g @lhci/cli@0.12.x

      - name: 运行 Lighthouse CI
        run: lhci autorun
        env:
          LHCI_GITHUB_APP_TOKEN: ${{ secrets.LHCI_GITHUB_APP_TOKEN }}

  bundle-analyzer:
    name: 包大小分析
    runs-on: ubuntu-latest
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建项目
        run: pnpm run build

      - name: 生成包分析报告
        run: |
          # 为每个包生成分析报告
          for pkg in packages/*/; do
            if [ -f "$pkg/dist/index.js" ]; then
              echo "Analyzing $pkg"
              npx webpack-bundle-analyzer "$pkg/dist/index.js" --mode static --report "$pkg/bundle-report.html"
            fi
          done

      - name: 上传分析报告
        uses: actions/upload-artifact@v4
        with:
          name: bundle-analysis
          path: packages/*/bundle-report.html
          retention-days: 30
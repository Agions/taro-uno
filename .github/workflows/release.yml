name: Automated Release

on:
  push:
    tags:
      - 'v*'
  workflow_dispatch:

jobs:
  prepare-release:
    name: 准备发布
    runs-on: ubuntu-latest
    outputs:
      should-release: ${{ steps.changesets.outputs.hasChangesets }}
      version: ${{ steps.version.outputs.version }}
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 检查 Changesets
        id: changesets
        uses: changesets/action@v1
        with:
          publish: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

      - name: 获取版本号
        id: version
        run: |
          VERSION=${GITHUB_REF#refs/tags/v}
          echo "version=$VERSION" >> $GITHUB_OUTPUT

  build-and-test:
    name: 构建和测试
    runs-on: ubuntu-latest
    needs: prepare-release
    if: needs.prepare-release.outputs.should-release == 'true'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 运行完整测试套件
        run: |
          pnpm run type-check
          pnpm run lint
          pnpm run test:coverage
          pnpm run build

      - name: 上传构建产物
        uses: actions/upload-artifact@v4
        with:
          name: release-build
          path: |
            packages/*/dist
            docs/.vitepress/dist
          retention-days: 30

  publish-npm:
    name: 发布到 NPM
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    if: needs.prepare-release.outputs.should-release == 'true'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
          token: ${{ secrets.GITHUB_TOKEN }}

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          registry-url: 'https://registry.npmjs.org'

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: release-build
          path: packages/*/dist

      - name: 发布到 NPM
        run: pnpm publish -r
        env:
          NPM_TOKEN: ${{ secrets.NPM_TOKEN }}

  create-release:
    name: 创建 GitHub Release
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, publish-npm]
    if: needs.prepare-release.outputs.should-release == 'true'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: 下载构建产物
        uses: actions/download-artifact@v4
        with:
          name: release-build
          path: release-artifacts

      - name: 生成变更日志
        run: |
          # 这里可以根据需要生成变更日志
          echo "# Taro-Uno v${{ needs.prepare-release.outputs.version }} 发布" > changelog.md
          echo "## 变更内容" >> changelog.md
          echo "请查看提交历史了解详细变更信息。" >> changelog.md

      - name: 创建 GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: v${{ needs.prepare-release.outputs.version }}
          name: Release v${{ needs.prepare-release.outputs.version }}
          body_path: changelog.md
          files: |
            release-artifacts/**/*.js
            release-artifacts/**/*.d.ts
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}

  deploy-docs:
    name: 部署文档
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test]
    if: needs.prepare-release.outputs.should-release == 'true'
    steps:
      - name: 检出代码
        uses: actions/checkout@v4

      - name: 设置 Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'

      - name: 安装 pnpm
        uses: pnpm/action-setup@v2
        with:
          version: '8'

      - name: 获取 pnpm store 目录
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - name: 设置 pnpm 缓存
        uses: actions/cache@v4
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: 安装依赖
        run: pnpm install --frozen-lockfile

      - name: 构建文档
        run: pnpm run docs:build

      - name: 部署到 GitHub Pages
        uses: peaceiris/actions-gh-pages@v4
        with:
          github_token: ${{ secrets.GITHUB_TOKEN }}
          publish_dir: ./docs/.vitepress/dist
          cname: taro-uno.dev

  notify-release:
    name: 发布通知
    runs-on: ubuntu-latest
    needs: [prepare-release, build-and-test, publish-npm, create-release, deploy-docs]
    if: always()
    steps:
      - name: 发送成功通知
        if: ${{ needs.publish-npm.result == 'success' && needs.create-release.result == 'success' }}
        uses: 8398a7/action-slack@v3
        with:
          status: success
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: '🎉 版本 v${{ needs.prepare-release.outputs.version }} 发布成功！'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}

      - name: 发送失败通知
        if: ${{ needs.publish-npm.result == 'failure' || needs.create-release.result == 'failure' }}
        uses: 8398a7/action-slack@v3
        with:
          status: failure
          fields: repo,message,commit,author,action,eventName,ref,workflow
          text: '❌ 版本发布失败，请检查日志！'
        env:
          SLACK_WEBHOOK_URL: ${{ secrets.SLACK_WEBHOOK_URL }}